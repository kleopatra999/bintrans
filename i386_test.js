var i386 = require('./i386');
var disasm = require('./i386_disassembler');
var interp = require('./i386_interpreter');

var intp = i386.new_interpreter();

//var code = [0x55, 0x31, 0xd2, 0x89, 0xe5, 0x8b, 0x45, 0x08, 0x56, 0x8b, 0x75, 0x0c, 0x53, 0x8d, 0x58, 0xff, 0x0f, 0xb6, 0x0c, 0x16, 0x88, 0x4c, 0x13, 0x01, 0x83, 0xc2, 0x01, 0x84, 0xc9, 0x75, 0xf1, 0x5b, 0x5e, 0x5d, 0xc3];

// fib:
var code = [0xb8, 0x01, 0x00, 0x00, 0x00, 0x83, 0xff, 0x03, 0x7c, 0x1e, 0x83, 0xc7, 0xfe, 0xba, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x89, 0xd0, 0x01, 0xc8, 0xff, 0xcf, 0x89, 0xca, 0x89, 0xc1, 0x75, 0xf4];

for (var i = 0; i < code.length; i++)
    intp.mem.setUint8(i, code[i]);

for (var i = 0; i < 17; i++)
    console.log(disasm.disassemble_insn(intp));

intp.pc = 0;
intp.regs_GPR[7] = 10;
while (intp.pc < code.length)
{
    //console.log("----------------------------");
    interp.interpret_insn(intp);
}
interp.dump_registers(intp);
